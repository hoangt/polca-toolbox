Rule Names
['remove_identity', 'reduce_to_0', 'undo_distributive', 'sub_to_mult', 'normalize_iteration_step', 'loop_reversal_d2i', 'loop_reversal_i2d', 'loop_interchange', 'loop_interchange_pragma', 'for_chunk', 'unrolling', 'move_inside_for_pre', 'move_inside_for_post', 'collapse_2_for_loops', 'for_loop_fission', 'for_loop_fusion_mapmap', 'for_loop_fusion', 'for_wo_block_2_for_w_block', 'remove_empty_for', 'for_to_while', 'while_to_for', 'if_wo_block_2_if_w_block', 'if_wo_else_2_if_w_else', 'split_addition_assign', 'join_addition_assign', 'mult_ternary_2_ternary', 'sum_ternary_2_ternary', 'assign_ternary_2_if_else', 'if_else_2_assign_ternary', 'if_2_assign_ternary', 'empty_else', 'remove_ternary', 'remove_block', 'remove_empty_if', 'remove_useless_statement', 'strength_reduction', 'useless_assign', 'replace_var_equal', 'contiguous_same_if', 'just_one_iteration_removal', 'join_assignments', 'propagate_assignment', 'loop_inv_code_motion', 'inlining', 'inlining_assignment', 'common_subexp_elimination', 'introduce_aux_array', 'flatten_float_array', 'flatten_int_array', 'subs_struct_by_fields', 'roll_up_init', 'roll_up', 'roll_up_array_init', 'roll_up_array']

Abst.-State mappings
{'1100001000020200401': 1, '1000001001010200310': 6, '1100001000020200301': 2, '1000001001020200410': 4, '1000001001020200310': 5, '-1100001000000000100': 0, '1000001001000200300': 8, '1100001000020200300': 3, '1000001001000200310': 7}

Init. States
[0]

Final States
[8]

Transition Table
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5]
[6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6]
[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]
